services:
  mysql:
    image: mysql:8.0
    container_name: mysql
    environment:
      MYSQL_ROOT_PASSWORD: ${SQL_DB_PASSWORD}
      MYSQL_ROOT_HOST: '%'
    ports:
      - "3306:3306"
    volumes:
       - ./docker/mysql/init-databases.sh:/docker-entrypoint-initdb.d/init-databases.sh
       - ./docker/mysql/schema_user_service.sql:/docker-entrypoint-initdb.d/schema_user_service.sql
       - ./docker/mysql/schema_product_service.sql:/docker-entrypoint-initdb.d/schema_product_service.sql
       - ./docker/mysql/schema_order_service.sql:/docker-entrypoint-initdb.d/schema_order_service.sql
       - ./docker/mysql/schema_email_service.sql:/docker-entrypoint-initdb.d/schema_email_service.sql
       - ./docker/mysql/schema_preorder_service.sql:/docker-entrypoint-initdb.d/schema_preorder_service.sql
    healthcheck:
      test: [ "CMD-SHELL", "mysqladmin ping -h localhost -uroot -p$SQL_DB_PASSWORD" ]
      interval: 10s
      timeout: 5s
      retries: 10
    command: >
      --default-authentication-plugin=caching_sha2_password
      --character-set-server=utf8mb4
      --collation-server=utf8mb4_unicode_ci
      --explicit_defaults_for_timestamp=1
    extends:
      file: common_config.yml
      service: network-deploy-service

  keycloak-mysql:
    container_name: keycloak-mysql
    image: mysql:8.0
    ports:
      - "3307:3306"
    volumes:
      - keycloak-mysql-data:/var/lib/mysql
    healthcheck:
      test: [ "CMD-SHELL", "mysqladmin ping -uroot -p${KEYCLOAK_DB_ROOT_PASSWORD}" ]
      interval: 10s
      timeout: 5s
      retries: 10
    environment:
      MYSQL_ROOT_PASSWORD: ${KEYCLOAK_DB_ROOT_PASSWORD}
      MYSQL_DATABASE: keycloak
      MYSQL_USER: keycloak
      MYSQL_PASSWORD: ${KEYCLOAK_DB_PASSWORD}
    extends:
      file: common_config.yml
      service: network-deploy-service

  keycloak:
    image: quay.io/keycloak/keycloak:26.4.0
    container_name: keycloak
    ports:
      - "7080:8080"
      - "9000:9000"
    environment:
      KC_DB: mysql
      KC_DB_URL_HOST: keycloak-mysql
      KC_DB_URL_PORT: 3306
      KC_DB_SCHEMA: keycloak
      KC_DB_USERNAME: keycloak
      KC_DB_PASSWORD: password
      KC_HEALTH_ENABLED: "true"
      KC_HTTP_ENABLED: "true"
      KC_HTTP_PORT: 8080
      KC_HTTP_RELATIVE_PATH: /
      KC_HOSTNAME: keycloak
      KC_HOSTNAME_URL: http://localhost:7080
      KC_HOSTNAME_ADMIN_URL: http://localhost:7080
      KC_HOSTNAME_STRICT: false
      KC_HOSTNAME_STRICT_HTTPS: false
      KC_PROXY: edge
      KC_BOOTSTRAP_ADMIN_USERNAME: ${KEYCLOAK_ADMIN_USER}
      KC_BOOTSTRAP_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD}
      KC_IMPORT: /opt/keycloak/data/import/grow-me-realm.json
    volumes:
       - ./grow-me-realm.json:/opt/keycloak/data/import/grow-me-realm.json
    command:
       - start-dev
       - --import-realm
    healthcheck:
      test: [
        "CMD-SHELL",
        "echo 'public class HealthCheck { public static void main(String[] args) throws Exception { java.net.HttpURLConnection conn = (java.net.HttpURLConnection)new java.net.URL(args[0]).openConnection(); System.exit(conn.getResponseCode()==200?0:1); } }' > /tmp/HealthCheck.java && java /tmp/HealthCheck.java http://localhost:9000/health/ready"
      ]
      interval: 15s
      timeout: 10s
      retries: 15
      start_period: 120s
    depends_on:
      keycloak-mysql:
        condition: service_healthy
    extends:
      file: common_config.yml
      service: network-deploy-service


  redis-cart:
    image: redis:latest
    container_name: cart-redis
    ports:
      - "6380:6379"
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 5s
      timeout: 5s
      retries: 3
    command: [ "redis-server","--appendonly","yes" ]
    volumes:
      - redis-data:/data
    extends:
      file: common_config.yml
      service: network-deploy-service


  redis-gateway:
    image: redis:latest
    container_name: redis-gateway
    ports:
      - "6381:6379"
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 5s
      timeout: 5s
      retries: 3
    command: [ "redis-server","--appendonly","yes" ]
    volumes:
      - redis-data-gateway:/data
    extends:
      file: common_config.yml
      service: network-deploy-service


  kafka-1:
    image: 'bitnamilegacy/kafka:latest'
    container_name: kafka-1
    environment:
      # KRaft settings
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      - KAFKA_KRAFT_CLUSTER_ID=bba98d69-6a5d-4466-acc6-23b50e493beb
      # Listeners
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9192,CONTROLLER://:9094,EXTERNAL://:9091
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka-1:9192,EXTERNAL://kafka-1:9091
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka-1:9094,2@kafka-2:9094,3@kafka-3:9094
    ports:
      - "9091:9091"
    healthcheck:
      test: >
        CMD-SHELL
        /opt/bitnami/kafka/bin/kafka-topics.sh --bootstrap-server kafka-1:9091 --topic hc --create --if-not-exists --partitions 1 --replication-factor 1 &&
        /opt/bitnami/kafka/bin/kafka-topics.sh --bootstrap-server kafka-1:9091 --topic hc --describe || exit 1

      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 30s
    volumes:
      - kafka-1-data:/bitnami/kafka
    extends:
      file: common_config.yml
      service: network-deploy-service

  kafka-2:
    image: 'bitnamilegacy/kafka:latest'
    container_name: kafka-2
    environment:
      # KRaft settings
      - KAFKA_CFG_NODE_ID=2
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      - KAFKA_KRAFT_CLUSTER_ID=bba98d69-6a5d-4466-acc6-23b50e493beb
      # Listeners
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9192,CONTROLLER://:9094,EXTERNAL://:9092
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka-2:9192,EXTERNAL://kafka-2:9092
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka-1:9094,2@kafka-2:9094,3@kafka-3:9094
    ports:
      - "9092:9092"
    healthcheck:
      test: >
        CMD-SHELL
        /opt/bitnami/kafka/bin/kafka-topics.sh --bootstrap-server kafka-2:9092 --topic hc --create --if-not-exists --partitions 1 --replication-factor 1 &&
        /opt/bitnami/kafka/bin/kafka-topics.sh --bootstrap-server kafka-2:9092 --topic hc --describe || exit 1

      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 30s
    volumes:
      - kafka-2-data:/bitnami/kafka
    extends:
      file: common_config.yml
      service: network-deploy-service

  kafka-3:
    image: 'bitnamilegacy/kafka:latest'
    container_name: kafka-3
    environment:
      # KRaft settings
      - KAFKA_CFG_NODE_ID=3
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      - KAFKA_KRAFT_CLUSTER_ID=bba98d69-6a5d-4466-acc6-23b50e493beb
      # Listeners
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9192,CONTROLLER://:9094,EXTERNAL://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka-3:9192,EXTERNAL://kafka-3:9093
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka-1:9094,2@kafka-2:9094,3@kafka-3:9094
    ports:
      - "9093:9093"
    healthcheck:
      test: >
        CMD-SHELL
        /opt/bitnami/kafka/bin/kafka-topics.sh --bootstrap-server kafka-3:9093 --topic hc --create --if-not-exists --partitions 1 --replication-factor 1 &&
        /opt/bitnami/kafka/bin/kafka-topics.sh --bootstrap-server kafka-3:9093 --topic hc --describe || exit 1

      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 30s
    volumes:
      - kafka-3-data:/bitnami/kafka
    extends:
      file: common_config.yml
      service: network-deploy-service

  config-server:
    image: tzetzaka2/config-server:v2
    container_name: config-server
    ports:
      - "8888:8888"
    depends_on:
      mysql:
        condition: service_healthy
    healthcheck:
      test: "curl --fail --silent http://localhost:8888/actuator/health/readiness | grep UP || exit 1"
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 10s
    extends:
      file: common_config.yml
      service: microservice-base-config

  eureka-server:
    image: tzetzaka2/eureka-server:v2
    container_name: eureka-server
    ports:
      - "8070:8070"
    depends_on:
     config-server:
       condition: service_healthy
    healthcheck:
      test: "curl --fail --silent http://localhost:8070/actuator/health/readiness | grep UP || exit 1"
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 10s
    environment:
      SPRING_APPLICATION_NAME: eureka-server
      SPRING_PROFILES_ACTIVE: prod
    extends:
      file: common_config.yml
      service: microservice-base-config

  user-service:
    image: tzetzaka2/user-service:v2
    container_name: user-service
    ports:
      - "8081:8081"
    deploy:
      resources:
        limits:
          memory: 1000M
    environment:
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/growmeusers
      SPRING_APPLICATION_NAME: user-service
    extends:
      file: common_config.yml
      service: microservice-db-config


  product-service:
    image: tzetzaka2/product-service:v2
    container_name: product-service
    ports:
      - "8087:8087"
    environment:
      SPRING_APPLICATION_NAME: product-service
      SPRING_PROFILES_ACTIVE: prod
    extends:
      file: common_config.yml
      service: microservice-db-config

  payment-service:
    image: tzetzaka2/payment-service:v2
    container_name: payment-service
    ports:
      - "8084:8084"
    environment:
      SPRING_APPLICATION_NAME: payment-service
      STRIPE_API_KEY: ${STRIPE_API_KEY}
      SPRING_PROFILES_ACTIVE: prod
    extends:
      file: common_config.yml
      service: microservice-eureka-config

  order-service:
    image: tzetzaka2/order-service:v2
    container_name: order-service
    ports:
      - "8083:8083"
    depends_on:
      redis-cart:
        condition: service_healthy
    environment:
      SPRING_APPLICATION_NAME: order-service
      REDIS_HOST: redis-cart
      REDIS_PORT: 6379
      SPRING_PROFILES_ACTIVE: prod
    extends:
      file: common_config.yml
      service: microservice-db-config

  keycloak-role-service:
    image: tzetzaka2/keycloak-api:v2
    container_name: keycloak-role-service
    ports:
      - "8082:8082"
    depends_on:
      keycloak:
        condition: service_healthy
    environment:
      SPRING_APPLICATION_NAME: keycloak-role-service
      KEYCLOAK_REALM: ${KEYCLOAK_REALM}
      KEYCLOAK_CLIENT_ID: ${KEYCLOAK_CLIENT_ID}
      KEYCLOAK_CLIENT_SECRET: ${KEYCLOAK_CLIENT_SECRET}
      KEYCLOAK_URL: http://keycloak:8080
      SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_ISSUER_URI: http://keycloak:8080/realms/grow-me
      JWT_AUTH_RESOURCE_ID: authenticationClientId
      SPRING_PROFILES_ACTIVE: prod
    extends:
      file: common_config.yml
      service: microservice-eureka-config


  email-service:
    image: tzetzaka2/email-service:v2
    container_name: email-service
    ports:
      - "8085:8085"
    environment:
      SPRING_APPLICATION_NAME: email-service
      SENDGRID_API_KEY: ${SENDGRID_API_KEY}
      SPRING_PROFILES_ACTIVE: prod
    extends:
      file: common_config.yml
      service: microservice-db-config


  preorder-service:
    image: tzetzaka2/preorder-service:v2
    container_name: preorder-service
    ports:
      - "8086:8086"
    deploy:
      resources:
        limits:
          memory: 1000M
    environment:
      SPRING_APPLICATION_NAME: preorder-service
    extends:
      file: common_config.yml
      service: microservice-db-config

  gateway-server:
    image: tzetzaka2/gateway-server:v2
    container_name: gateway-server
    ports:
      - "8080:8080"
    environment:
      SPRING_APPLICATION_NAME: gateway-server
      SPRING_DATA_REDIS_CONNECT_TIMEOUT: 2s
      SPRING_DATA_REDIS_HOST: redis-gateway
      SPRING_DATA_REDIS_PORT: 6379
      SPRING_DATA_REDIS_TIMEOUT: 1s
      SPRING_PROFILES_ACTIVE: prod
      SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_ISSUER_URI: http://keycloak:8080/realms/grow-me
      SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_JWK_SET_URI: http://keycloak:8080/realms/grow-me/protocol/openid-connect/certs
    depends_on:
      keycloak:
        condition: service_healthy
      redis-gateway:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8080/actuator/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    extends:
      file: common_config.yml
      service: microservice-eureka-config

  growme-client:
    image: tzetzaka2/growme-client:v1
    container_name: growme-client
    ports:
      - "4200:80"
    restart: always
    environment:
      API_BASE_URL: http://gateway-server:8080
      KEYCLOAK_URL: http://keycloak:8080
      KEYCLOAK_REALM: grow-me
      KEYCLOAK_CLIENT_ID: growme-client
    depends_on:
      gateway-server:
        condition: service_started
    extends:
      file: common_config.yml
      service: network-deploy-service

volumes:
  keycloak-mysql-data:
  keycloak_data:
  redis-data:
  redis-data-gateway:
  kafka-1-data:
  kafka-2-data:
  kafka-3-data:



networks:
  grow-me:
    driver: "bridge"